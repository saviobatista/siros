from datetime import datetime, timedelta
from lib.previsao import Previsao
from lib.rules import *
from lib.siros_parser import SirosParser

def main():
    """Main entry point for the SIROS application."""
    aerodromo = 'SBKP' # Aerodromo a ser processado
    # Na cria√ß√£o do objeto o parametro aerodromo trata do objeto de referencia para definir as partidas e chegadas
    robot = SirosParser(aerodromo)
    # A propriedade maintain define se o arquivo CSV baixado ser√° excluido ou n√£o ap√≥s a execu√ß√£o,
    # evite definir False para o modelo ou o mesmo ser√° removido
    robot.maintain = False
    # begin e end s√£o os per√≠odos de pesquisa, para calculo da escala do turno o recomend√°vel √© iniciar hoje e terminar amanh√£
    try:
        print("üåê Attempting to fetch data from SIROS website...")
        voos = robot.parse(begin=datetime.now().strftime('%d/%m/%Y'),end=(datetime.now() + timedelta(days=1)).strftime('%d/%m/%Y'))
    except Exception as e:
        print(f"‚ùå Failed to fetch from SIROS: {e}")
        print("üìÅ Falling back to sample data for demonstration...")
        # Caso queira apenas testar o processamento do CSV, h√° um modelo de arquivo para testes e chama o m√©todo parseCSV
        voos = robot.parseCSV('modelo.csv')
    # Tratamento da previs√£o de movimentos
    previsao = Previsao(aerodromo)
    # Turnos de servi√ßo em 2 parametros:
    #   turnos: List de int com os hor√°rios de 0 a 23 para a hora local de inicio do turno
    #   duracao: int com a dura√ß√£o em horas do turno de servi√ßo
    previsao.setTurnos(turnos=[7,15,23],duracao=8)
    # parseVoos trata os registros processados pelo SirosParser.parseCSV (tamb√©m chamado pelo parse)
    previsao.parseVoos(voos)
    # Lista o resultado de hora em hora com HORA | ARR | DEP | TOTAL
    previsao.dump()
    # Lista o resultado de movimentos para o turno HORA | ARR | DEP | TOTAL
    previsao.dump_turno()
    # Lista HORA | ARR | DEP | TOTAL | POSI√á√ïES OPERACIONAIS
    # @rules implementa√ß√£o da class Rules com o m√©todo test retornando uma String com as posi√ß√µes operacionais
    previsao.dump_distribuicao(rules=RulesBita)
    # Aguarda tecla para finalizar
    input("Pressione qualquer tecla para fechar...")


if __name__ == '__main__':
    main()